import { Project } from '@/types';

export const projects: Project[] = [
    {
        title: '웹 기반 에너지 관리 시스템(EnMS)',
        description:
            '다양한 산업 시설의 에너지 데이터를 실시간으로 수집, 분석, 시각화하여 에너지 효율을 최적화하는 풀스택 프로젝트',
        tech: [
            'jQuery',
            'React',
            'React Flow',
            'eCharts',
            'Spring Boot',
            'Java',
            'TypeScript',
            'MariaDB',
            'InfluxDB',
            'MyBatis',
            'RabbitMQ',
        ],
        thumbnail: '1.png',
        category: ['풀스택', 'B2B', '데이터 시각화'],
        detailedDescription:
            '다양한 산업 시설에서 발생하는 에너지 데이터를 실시간으로 수집, 분석, 시각화하여 에너지 효율 최적화 및 비용 절감을 목표로 하는 웹 기반 에너지 관리 시스템(EnMS) 신규 구축 프로젝트입니다. 백엔드 아키텍처 설계부터 데이터 처리 파이프라인 구축, 그리고 jQuery 및 React 기반의 프론트엔드 개발까지 전체 시스템의 핵심 개발을 주도했습니다.',
        features: [
            '사용자 맞춤형 실시간 에너지 대시보드',
            'React Flow 기반 동적 에너지 계통도(에너지맵) 기능',
            '대용량 시계열 데이터 처리 비동기 파이프라인',
            '탄소 배출량 관리를 위한 LCA(전 과정 평가) 기능',
        ],
        contributions: [
            {
                title: 'React Flow 기반 동적 에너지 계통도 시각화 기능 개발',
                details: [
                    '복잡한 에너지 설비와 계측 태그 간의 관계를 시각적으로 표현하기 위해, React Flow 라이브러리를 도입하여 드래그 앤 드롭으로 노드와 엣지를 편집할 수 있는 동적 계통도(에너지맵) 기능을 개발했습니다.',
                    '계통도 위의 각 노드(설비)에 실시간 에너지 데이터를 연동하여 표시함으로써, 사용자가 전체 에너지 흐름과 개별 설비의 상태를 한눈에 모니터링할 수 있도록 구현했습니다.',
                ],
            },
            {
                title: '사용자 친화적 실시간 에너지 대시보드 구축 및 시각화 성능 최적화',
                details: [
                    '사용자가 직접 에너지 현황판의 아이템(차트, 게이지, 계통도 등)을 추가하고, 드래그 앤 드롭 및 리사이징을 통해 원하는 레이아웃을 구성할 수 있는 동적 대시보드 기능을 구현했습니다.',
                    '기존 ApexCharts, c3 Chart 등으로 파편화되어 있던 차트 라이브러리를 eCharts로 표준화하여 대규모 데이터 조회 시에도 지연 없는 안정적인 모니터링 환경을 구축하고 UI 통일성을 확보했습니다.',
                ],
            },
            {
                title: '대용량 시계열 데이터 처리 파이프라인 설계 및 구축',
                details: [
                    '실시간으로 수집되는 대규모 시계열 데이터를 안정적으로 처리하기 위해, InfluxDB와 RabbitMQ를 중심으로 한 비동기 데이터 처리 파이프라인을 설계하고 구축했습니다.',
                    'Spring Boot Scheduler를 사용하여 InfluxDB의 원본 데이터를 15분, 피크(Peak) 단위로 주기적으로 집계하고, 이벤트를 RabbitMQ 메시지 큐에 전달하여 시스템 부하를 분산시키고 안정적인 데이터 분석 기반을 마련했습니다.',
                ],
            },
            {
                title: '개발 생산성 향상을 위한 빌드/배포 프로세스 자동화',
                details: [
                    'Gradle 스크립트를 작성하여 Spring Boot와 React를 하나의 명령어로 동시에 빌드하고, 단일 아티팩트로 배포할 수 있는 환경을 구축하여 개발 생산성을 높이고 배포 오류를 최소화했습니다.',
                ],
            },
        ],
        troubleShooting: [
            {
                title: '다수 차트 라이브러리 혼용으로 인한 시각화 성능 저하 및 유지보수 문제',
                details: [
                    '[문제점] ApexCharts, c3 Chart 등 여러 차트 라이브러리가 프로젝트 내에 혼재되어 있어 UI 통일성이 부족했고, 특히 대용량 데이터 조회 시 렌더링 지연이 발생하는 등 성능 문제가 심각했습니다.',
                    '[해결] 대용량 데이터 처리에 강점이 있는 eCharts를 표준 라이브러리로 선정하고, 기존의 모든 차트를 eCharts로 점진적으로 마이그레이션하는 작업을 주도했습니다. 이를 통해 대규모 데이터셋에서도 안정적인 렌더링 성능을 확보하고, 코드의 일관성을 높여 유지보수 비용 절감 효과를 기대할 수 있었습니다.',
                ],
            },
            {
                title: '메시지 큐(RabbitMQ)를 이용한 비동기 데이터 처리 시스템 구축',
                details: [
                    '[문제점] 실시간으로 유입되는 방대한 시계열 데이터를 동기적으로 처리하면서 시스템에 병목 현상이 발생했고, 데이터 집계 작업 시 부하가 급증하여 시스템 전체의 안정성을 위협했습니다.',
                    '[해결] RabbitMQ를 도입하여 데이터 처리 요청을 메시지 큐에 적재하고, 별도의 컨슈머가 이를 비동기적으로 처리하는 파이프라인을 설계 및 구축했습니다. 이를 통해 시스템 부하를 효과적으로 분산시키고, 데이터 처리량 급증에도 안정적으로 시스템을 운영할 수 있는 기반을 마련했습니다.',
                ],
            },
        ],
    },
    {
        title: 'PASS - AI 기반 9급 공무원 시험 학습 플랫폼',
        description:
            'AI가 학습자의 취약점을 분석하고 미래 정오답률을 예측하여 개인화된 학습 경험을 제공하는 크로스 플랫폼 모바일 앱 서비스',
        tech: [
            'Flutter',
            'GetX',
            'Nest.js',
            'FastAPI',
            'TypeORM',
            'PyTorch',
            'Dart',
            'TypeScript',
            'Python',
            'MariaDB',
            'Firebase',
            'Docker',
        ],
        thumbnail: '1.png',
        category: ['풀스택', 'B2C', '모바일 앱', 'AI'],
        detailedDescription:
            'Flutter 기반의 크로스플랫폼(iOS/Android) 모바일 앱 서비스로, AI가 학습자의 취약점을 분석하고 미래 정오답률을 예측하여 개인화된 학습 경험을 제공하는 9급 공무원 시험 대비 학습 플랫폼입니다. 기획 초기 단계부터 참여하여 앱(Front-end), 메인 API 서버(Back-end), AI 예측 API 서버(AI)의 설계, 개발, 배포, 운영까지 전 과정에 핵심적인 역할을 수행했습니다.',
        features: [
            'AI 진단시험, 단원별 학습, 오답노트, 복습 문항 제공',
            'DKT 예측값 기반 사용자의 학습 성취도 분석 및 시각화',
            '다양한 인증 방식(이메일, 소셜, 게스트) 및 계정 연동 지원',
            'FCM 기반 푸시 알림 시스템',
        ],
        contributions: [
            {
                title: '백엔드 시스템 안정화 주도 (Spring Boot → Nest.js 마이그레이션)',
                details: [
                    'OAuth 로그인 및 FCM 푸시 알림 등 Node.js 생태계에 친화적인 기능 구현을 가속화하고 개발 생산성을 높이기 위해, 기존 Spring Boot(Java) 서버의 모든 API 엔드포인트를 재작성하여 Nest.js(TypeScript) 기반으로 성공적인 마이그레이션을 주도했습니다.',
                    '데이터베이스 관리의 유연성 향상을 위해 기존 MyBatis 기반의 데이터 접근 방식을 TypeORM으로 전환하고, 복잡한 쿼리는 Raw Query를 활용하여 성능을 확보하며 안정적인 데이터 마이그레이션을 완료했습니다.',
                ],
            },
            {
                title: 'DKT AI 모델 기반 학습 예측 API 서버 구축 및 Docker 배포',
                details: [
                    '학습자의 문제 풀이 이력을 기반으로 미래 정오답률을 예측하는 PyTorch 기반 DKT(Deep Knowledge Tracing) 모델 서빙 API를 FastAPI를 사용하여 신규 구축했습니다.',
                    '예측에 필요한 데이터를 정제하고 모델의 입출력 파이프라인을 설계했으며, Docker를 활용하여 AI 서버를 컨테이너화하고 안정적인 배포 환경을 마련했습니다.',
                ],
            },
            {
                title: 'Flutter 기반 하이브리드 앱 전체 기능 개발 및 양대 마켓 출시/운영',
                details: [
                    '사용자 인증부터 학습, 분석에 이르는 앱의 모든 핵심 기능을 Flutter로 개발했으며, GetX 라이브러리를 통해 상태 관리, 라우팅, 의존성 주입 등 앱의 전체 아키텍처를 설계 및 구현했습니다.',
                    'Google Play Store와 Apple App Store 양대 마켓에 성공적으로 앱을 출시하여 누적 다운로드 1,000회 이상을 달성하고, 지속적인 업데이트를 통해 서비스를 운영했습니다.',
                ],
            },
        ],
        troubleShooting: [
            {
                title: '개발 생산성 및 확장성 확보를 위한 백엔드 시스템 마이그레이션',
                details: [
                    '[문제점] 기존 Spring Boot 기반 백엔드는 안정적이었으나, OAuth 소셜 로그인, FCM 푸시 알림 등 외부 서비스 연동 구현 시 Node.js 생태계에 비해 개발 속도가 더디고 라이브러리 지원이 제한적이었습니다.',
                    '[해결] TypeScript의 타입 안정성과 Node.js의 비동기 처리 능력을 활용하기 위해 Nest.js로의 전면 마이그레이션을 주도했습니다. 기존의 모든 API를 재설계하고, MyBatis 기반 데이터 접근 방식을 TypeORM으로 전환하여 개발 생산성과 코드 유지보수성을 크게 향상시켰습니다.',
                ],
            },
            {
                title: '복잡한 크로스플랫폼 인증 및 푸시 알림 시스템 구축',
                details: [
                    '[문제점] 게스트 로그인, 소셜 로그인(Google, Apple 등), 기존 계정과의 연동 등 복잡한 인증 시나리오를 Android와 iOS 양 플랫폼에서 일관되게 처리해야 했으며, 각기 다른 푸시 알림(FCM) 정책에 대응해야 했습니다.',
                    '[해결] Firebase Authentication을 중심으로 통합 인증 시스템을 설계하고, 각 소셜 로그인 케이스별 예외 처리를 통해 안정성을 확보했습니다. FCM 또한 플랫폼별(Android/iOS) 분기 처리를 통해 안정적인 알림 시스템을 구축하고, 앱 내에서 사용자가 직접 수신 여부를 제어하는 기능을 구현했습니다.',
                ],
            },
        ],
    },
    {
        title: '웹 관제 플랫폼 wGCS 프론트엔드 개발',
        description:
            '다수의 드론을 동시에 관제하고 임무를 할당하는 웹 기반 관제 시스템(wGCS)의 프론트엔드 개발 프로젝트',
        tech: ['Vue.js', 'CesiumJS', 'JavaScript'],
        thumbnail: '1.png',
        category: ['프론트엔드', '관제 시스템', '2D/3D 지도'],
        detailedDescription:
            '웹 환경에서 다수의 드론을 동시에 관제하고 임무를 할당하는 wGCS(Web Ground Control System)의 프론트엔드 시스템을 개발했습니다. CesiumJS(2D/3D 지도 라이브러리)를 기반으로 지도 위에 드론의 임무 경로, 안전 비행 구역 등을 설정하고 모니터링하는 기능을 구현했습니다.',
        features: [
            'CesiumJS 지도 기반 임무 경로(Waypoint) 생성/관리',
            '드론 안전 비행을 위한 지오펜싱(Geofencing) 시스템',
            '5가지 주요 해상도에 대응하는 반응형 UI/UX',
        ],
        contributions: [
            {
                title: '지도 기반 임무 경로(Waypoint) 생성/관리 기능 개발',
                details: [
                    'CesiumJS를 활용하여, 지도상에서 직관적인 UI로 다수 드론의 임무 경로를 생성, 수정, 삭제하는 핵심 기능을 개발했습니다.',
                    '사용자가 생성한 임무를 파일 형태로 업로드/다운로드하는 기능을 구현하여, 임무 데이터의 재사용성과 관리 효율성을 크게 향상시켰습니다.',
                ],
            },
            {
                title: '드론 안전 비행을 위한 지오펜싱(Geofencing) 시스템 구축',
                details: [
                    '드론의 안전 비행 구역 설정을 위해 지도 위에 Polygon, Circle 등 다양한 형태의 가상 울타리를 설정하고, 좌표 기반으로 세밀하게 제어하는 기능을 주도적으로 개발하여 관제 안정성을 확보했습니다.',
                ],
            },
            {
                title: '다양한 관제 환경을 고려한 반응형 UI/UX 구축 및 개선',
                details: [
                    '5가지 주요 해상도([2560px] ~ [1280px])에 대응하는 반응형 레이아웃을 구현하여 다양한 디바이스 환경에서의 호환성을 확보했습니다.',
                    '사용자 인터랙션 과정에서 발생하던 화면 흔들림, 렌더링 오류, 데이터 불일치 등 다수의 버그를 해결하여 안정적인 사용자 경험을 제공했습니다.',
                ],
            },
            {
                title: '코드 품질 및 유지보수성 개선을 위한 리팩토링',
                details: [
                    'Vue 컴포넌트 내 복잡하게 얽혀있던 마우스 클릭 이벤트 로직을 별도의 모듈로 분리하는 리팩토링을 진행하여 코드의 응집도를 높이고 중복을 제거하여 애플리케이션의 유지보수성 및 확장성을 개선했습니다.',
                ],
            },
        ],
        troubleShooting: [
            {
                title: '다양한 디바이스 환경 대응을 위한 반응형 UI 구축',
                details: [
                    '[문제점] 드론 관제 환경은 대형 모니터부터 일반 노트북까지 다양했기 때문에, 여러 해상도에서 UI가 부자연스럽게 보이거나 조작이 어려운 문제가 발생했습니다.',
                    '[해결] 5가지 주요 해상도(2560px ~ 1280px)를 타겟으로 미디어 쿼리와 유연한 레이아웃 설계를 통해 각 해상도에 최적화된 반응형 UI를 구현했습니다. 이를 통해 각기 다른 환경에서도 일관되고 안정적인 관제 경험을 제공할 수 있었습니다.',
                ],
            },
            {
                title: '복잡한 지도 인터랙션 로직으로 인한 코드 품질 저하',
                details: [
                    '[문제점] Waypoint 생성, 수정, 삭제, 펜스 그리기 등 지도 위에서 발생하는 모든 마우스 클릭 이벤트가 하나의 Vue 컴포넌트 내에 복잡하게 얽혀 있어 코드 가독성이 떨어지고 기능 추가 및 버그 수정이 매우 어려웠습니다.',
                    '[해결] 지도와 관련된 클릭 이벤트를 역할(경로 제어, 펜스 제어 등)에 따라 별도의 모듈로 분리하는 리팩토링을 진행했습니다. 이를 통해 코드의 응집도를 높이고 재사용성을 확보하여 유지보수성과 확장성을 크게 개선했습니다.',
                ],
            },
        ],
    },
];
